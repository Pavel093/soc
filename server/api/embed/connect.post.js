import { connectDB } from '../../utils/mongodb'
import Domain from '../../models/Domain'
import Statistics from '../../models/Statistics'

export default defineEventHandler(async (event) => {
  console.log('üì• Connect endpoint –≤—ã–∑–≤–∞–Ω')
  
  await connectDB()
  
  try {
    const body = await readBody(event)
    const { domain, pageUrl, userAgent, sessionId } = body
    
    console.log('üìä –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:', { domain, pageUrl, sessionId })
    
    // –ü—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–∏—Ç—å IP –±–µ–∑ –∏–º–ø–æ—Ä—Ç–æ–≤
    let ipAddress = '127.0.0.1'
    
    try {
      // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å IP
      ipAddress = event.node?.req?.headers?.['x-forwarded-for'] ||
                  event.node?.req?.connection?.remoteAddress ||
                  event.node?.req?.socket?.remoteAddress ||
                  '127.0.0.1'
      
      // –û—á–∏—â–∞–µ–º IP –æ—Ç IPv6 –ø—Ä–µ—Ñ–∏–∫—Å–∞
      ipAddress = ipAddress.replace(/^::ffff:/, '')
    } catch (e) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å IP:', e)
    }
    
    console.log('üåê IP –∞–¥—Ä–µ—Å:', ipAddress)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –¥–æ–º–µ–Ω
    let domainRecord = await Domain.findOne({ domain })
    console.log('üîç –ù–∞–π–¥–µ–Ω –¥–æ–º–µ–Ω:', domainRecord)
    
    if (!domainRecord) {
      // –ü–µ—Ä–≤—ã–π —Ä–∞–∑ –≤–∏–¥–∏–º —ç—Ç–æ—Ç –¥–æ–º–µ–Ω - —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
      domainRecord = await Domain.create({
        domain,
        firstSeen: new Date(),
        lastSeen: new Date(),
        totalViews: 1
      })
      console.log('‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –¥–æ–º–µ–Ω:', domainRecord)
    } else {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥–æ–º–µ–Ω
      domainRecord.lastSeen = new Date()
      domainRecord.totalViews += 1
      await domainRecord.save()
      console.log('üìà –û–±–Ω–æ–≤–ª–µ–Ω –¥–æ–º–µ–Ω:', domainRecord)
    }
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    const stat = await Statistics.create({
      domain,
      pageUrl,
      userAgent,
      ipAddress,
      sessionId,
      referrer: pageUrl
    })
    console.log('üìù –°–æ–∑–¥–∞–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', stat)
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å
    return {
      success: true,
      blocked: domainRecord.isBlocked,
      domain: domain
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ connect.post:', error)
    return {
      success: false,
      blocked: false,
      error: error.message
    }
  }
})
